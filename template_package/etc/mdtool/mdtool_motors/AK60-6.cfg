[motor]
# motor name [20 characters max]
name = AK60_6
# pole pairs - the number of rotor magnets/2 if you are unsure just type zero - during calibration it will be autodetected 
pole pairs = 0
# declated KV of the motor - its used when torque constant is set to zero
KV = 80
# motor torque constant Nm/A 
torque constant = 0.119
# 2nd degree polynomial used to aproximate nonlinear torque constant (in most applications you should leave it at zero)
torque constant a = 0.0
torque constant b = 0.0
torque constant c = 0.0
# gear ratio -> example 6:1 reductor is 0.166666 whereas 1:2 multiplicator is 2
gear ratio = 0.166666
# maximum allowable phase current (can be also changed using "mdtool config current" command)
max current = 10
# torque bandwidth in Hz (please refer to the manual for more info)
torque bandwidth = 500
# dynamic and static friction coefficients in Nm (not yet implemented)
dynamic friction = 0.0
static friction = 0.0
# motor shutdown temperature 
shutdown temp = 80

[output encoder]
# output encoder is connected - 1 / is not connected - 0
output encoder = 0
# output encoder direction 
# the direction could be determined in the following way (RLS encoder type):
# if the magnetic strip is facing a positive direction of the motor axis set dir to 1.0f (positive direction goes from the controller through the motor shaft)
# if the magnetic strip is facing a negative direction of the motor axis set dir to -1.0f
output encoder dir = 0
# default baudrate of the RLS encoder
output encoder default baud = 115200

[position PID]
# position PID default gains (used at every startup, then can be modified using the C++/Python script)
kp = 20.0
ki = 0.5
kd = 0.0f
windup = 15.0
max out = 30.0

[velocity PID]
# velocity PID default gains (used at every startup, then can be modified using the C++/Python script)
kp = 0.05
ki = 0.5
kd = 0.0
windup = 1.5
max out = 10.0

[impedance PD]
# impedance PID default gains (used at every startup, then can be modified using the C++/Python script)
kp = 3.5
kd = 0.25
max out = 10.0

